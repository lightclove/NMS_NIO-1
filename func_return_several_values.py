#!/usr/bin/env python3
"""
    Python позволяет вам возвращать из функции несколько значений. 
    Для этого необходимо вернуть структуру данных, содержащую эти несколько значений. 
    Например, список количества миль, которые надо пробежать за неделю.
"""
def miles_to_run(minimum_miles):
    week_1 = minimum_miles + 2
    week_2 = minimum_miles + 4
    week_3 = minimum_miles + 6
    return [week_1, week_2, week_3]

print(miles_to_run(2)) # result: [4, 6, 8]

# как возвращать несколько значений из структур вроде кортежа
"""
    Кортеж — упорядоченная, неизменяемая последовательность. 
    То есть, значения внутри кортежа мы изменять не можем. 
    Мы можем использовать кортеж, например, для хранения информации о человеке 
    (о его имени, возрасте, месте жительства). 
    
Возврат нескольких значений из функции
Списки, Словари, Функции

Python позволяет вам возвращать из функции несколько значений. 

Для этого необходимо вернуть структуру данных, содержащую эти несколько значений. Например, список количества миль, которые надо пробежать за неделю.
"""
def miles_to_run(minimum_miles):
    week_1 = minimum_miles + 2
    week_2 = minimum_miles + 4
    week_3 = minimum_miles + 6
    return [week_1, week_2, week_3]
print(miles_to_run(2))
# result: [4, 6, 8]
"""
Структура данных — контейнер, хранящий однотипные данные. 
Эти данные могут быть возвращены из функций. 
Узнаем, как возвращать несколько значений из структур вроде кортежа, списка и словаря. 

Кортеж — упорядоченная, неизменяемая последовательность. То есть, значения внутри кортежа мы изменять не можем. 

Мы можем использовать кортеж, например, для хранения информации о человеке (о его имени, возрасте, месте жительства). 
Заметьте, что в предложении return мы не использовали круглые скобки для возврата значения. 
Это потому, что кортеж можно вернуть, просто отделив каждый элемент запятой, как в нашем примере
"""

nancy = ("Нэнси", 55, "Чикаго")

#Пример функции, которая возвращает кортеж:
def person():
    return "Боб", 32, "Бостон"
 
print(person())
# result: ('Боб', 32, 'Бостон')

nancy = ("Нэнси", 55, "Чикаго")
# Пример функции, которая возвращает кортеж:
def person():
    return "Боб", 32, "Бостон"
 
print(person()) # result: ('Боб', 32, 'Бостон')

"""
    «Кортеж образуют запятые, а не круглые скобки» — так написано в документации. 
    Но для создания пустых кортежей круглые скобки необходимы. Также это помогает избежать путаницы.
    Пример функции, которая использует () для возврата кортежа: 
"""
def person(name, age):
    return (name, age)
    print(person("Генри", 5)) #result: ('Генри', 5)

print(person('Dimah', 36))
# Список — упорядоченная, изменяемая последовательность. 
# Элементы списка можно изменять. 
cities = ["Бостон", "Чикаго", "Джексонвилл"]

test_scores = [55, 99, 100, 68, 85, 78]

# Взгляните на функцию ниже. Она возвращает список, содержащий десять чисел:
def ten_numbers():
    numbers = []
    for i in range(1, 11):
        numbers.append(i)
    return numbers

print(ten_numbers())

#Еще один пример. В этот раз мы передаем несколько аргументов в функцию:
def miles_ran(week_1, week_2, week_3, week_4):
    return [week_1, week_2, week_3, week_4]
 
monthly_mileage = miles_ran(25, 30, 28, 40)
print(monthly_mileage)
#result: [25, 30, 28, 40]

"""
Словарь — структура, в которой хранятся пары значений в виде «ключ-значение». 
Заключены эти значения в фигурные скобки {}. Каждому ключу соответствует свое значение.
Рассмотрим пример. В следующем словаре содержатся имена сотрудников. 
Имя сотрудника — ключ, его должность — значение. 
""" 
employees = {
    "Джек": "Инженер",
    "Мэри": "Менеджер",
    "Генри": "Писатель",
}
#Пример функции, возвращающей словарь в виде «ключ-значение»:
def city_country(city, country):
    location = {}
    location[city] = country
    return location
 
favorite_location = city_country("Бостон", "США")
print(favorite_location)
# result: {'Бостон': 'США'}